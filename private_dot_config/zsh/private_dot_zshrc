
#
# User configuration sourced by interactive shells
#

# -----------------
# Zsh configuration
# -----------------

#
# History
#

# Remove older command from the history if a duplicate is to be added.
setopt HIST_IGNORE_ALL_DUPS

#
# Input/output
#

# Set editor default keymap to emacs (`-e`) or vi (`-v`)
bindkey -v

# Prompt for spelling correction of commands.
#setopt CORRECT

# Customize spelling correction prompt.
#SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '

# Remove path separator from WORDCHARS.
WORDCHARS=${WORDCHARS//[\/]}

# -----------------
# Zim configuration
# -----------------

# Use degit instead of git as the default tool to install and update modules.
#zstyle ':zim:zmodule' use 'degit'

# --------------------
# Module configuration
# --------------------

#
# git
#

# Set a custom prefix for the generated aliases. The default prefix is 'G'.
#zstyle ':zim:git' aliases-prefix 'g'

#
# input
#

# Append `../` to your input for each `.` you type after an initial `..`
zstyle ':zim:input' double-dot-expand yes

#
# termtitle
#

# Set a custom terminal title format using prompt expansion escape sequences.
# See http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html#Simple-Prompt-Escapes
# If none is provided, the default '%n@%m: %~' is used.
#zstyle ':zim:termtitle' format '%1~'

#
# zsh-autosuggestions
#

# Disable automatic widget re-binding on each precmd. This can be set when
# zsh-users/zsh-autosuggestions is the last module in your ~/.zimrc.
ZSH_AUTOSUGGEST_MANUAL_REBIND=1

# Customize the style that the suggestions are shown with.
# See https://github.com/zsh-users/zsh-autosuggestions/blob/master/README.md#suggestion-highlight-style
#ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=242'

#
# zsh-syntax-highlighting
#

# Set what highlighters will be used.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters.md
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

# Customize the main highlighter styles.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters/main.md#how-to-tweak-it
#typeset -A ZSH_HIGHLIGHT_STYLES
#ZSH_HIGHLIGHT_STYLES[comment]='fg=242'

# ------------------
# Initialize modules
# ------------------

ZIM_HOME=${ZDOTDIR:-${HOME}}/.zim
# Download zimfw plugin manager if missing.
if [[ ! -e ${ZIM_HOME}/zimfw.zsh ]]; then
  if (( ${+commands[curl]} )); then
    curl -fsSL --create-dirs -o ${ZIM_HOME}/zimfw.zsh \
        https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
  else
    mkdir -p ${ZIM_HOME} && wget -nv -O ${ZIM_HOME}/zimfw.zsh \
        https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
  fi
fi
# Install missing modules, and update ${ZIM_HOME}/init.zsh if missing or outdated.
if [[ ! ${ZIM_HOME}/init.zsh -nt ${ZDOTDIR:-${HOME}}/.zimrc ]]; then
  source ${ZIM_HOME}/zimfw.zsh init -q
fi
# Initialize modules.
source ${ZIM_HOME}/init.zsh

# ------------------------------
# Post-init module configuration
# ------------------------------

#
# zsh-history-substring-search
#

zmodload -F zsh/terminfo +p:terminfo
# Bind ^[[A/^[[B manually so up/down works both before and after zle-line-init
for key ('^[[A' '^P' ${terminfo[kcuu1]}) bindkey ${key} history-substring-search-up
for key ('^[[B' '^N' ${terminfo[kcud1]}) bindkey ${key} history-substring-search-down
for key ('k') bindkey -M vicmd ${key} history-substring-search-up
for key ('j') bindkey -M vicmd ${key} history-substring-search-down
unset key
# }}} End configuration added by Zim install

set -U __done_min_cmd_duration 10000
set -U __done_notification_urgency_level low

# autoload -U colors && colors

# History in cache directory:
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.cache/zsh/history


zstyle ':completion:*' completer _expand _complete _ignored _correct _approximate
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' matcher-list ''
zstyle ':completion:*' menu select
_comp_options+=(globdots)		# Include hidden files.x
zmodload zsh/complist

autoload -Uz compinit
zstyle :compinstall filename '/home/Abhishek/.config/zsh/.zshrc'
autoload -Uz bashcompinit
bashcompinit



# vi mode
bindkey -v
export KEYTIMEOUT=1

# Use vim keys in tab complete menu:
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history
bindkey -v '^?' backward-delete-char


# Change cursor shape for different vi modes.
function zle-keymap-select {
  if [[ ${KEYMAP} == vicmd ]] ||
     [[ $1 = 'block' ]]; then
    echo -ne '\e[1 q'
  elif [[ ${KEYMAP} == main ]] ||
       [[ ${KEYMAP} == viins ]] ||
       [[ ${KEYMAP} = '' ]] ||
       [[ $1 = 'beam' ]]; then
    echo -ne '\e[5 q'
  fi
}
zle -N zle-keymap-select
zle-line-init() {
    zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
    echo -ne "\e[5 q"
}

zle -N zle-line-init
echo -ne '\e[5 q' # Use beam shape cursor on startup.
preexec() { echo -ne '\e[5 q' ;} # Use beam shape cursor for each new prompt.

# Use lf to switch directories and bind it to ctrl-o
# lfcd () {
#     tmp="$(mktemp)"
#     lf -last-dir-path="$tmp" "$@"
#     if [ -f "$tmp" ]; then
#         dir="$(cat "$tmp")"
#         rm -f "$tmp"
#         [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
#     fi
# }

retemp(){
  sudo mount -o remount,size=10G,noatime /tmp
  echo "Done. Please use 'df -h' to make sure folder size is increased."
}

wrandom(){
  keyword=${1:-dark} 
  shift
  echo "DELETING: previous wallpapers"
  rm -rf /home/Abhishek/.cache/wallheaven/
  echo "DOWLOADING a new wallpaper with search term $keyword"
  wallheaven $@ -r $keyword 
}

spfd() {
    os=$(uname -s)

    # Linux
    if [[ "$os" == "Linux" ]]; then
        export SPF_LAST_DIR="${XDG_STATE_HOME:-$HOME/.local/state}/superfile/lastdir"
    fi

    # macOS
    if [[ "$os" == "Darwin" ]]; then
        export SPF_LAST_DIR="$HOME/Library/Application Support/superfile/lastdir"
    fi

    command spf "$@"

    [ ! -f "$SPF_LAST_DIR" ] || {
        . "$SPF_LAST_DIR"
        rm -f -- "$SPF_LAST_DIR" > /dev/null
    }
}

# Cleanup orphaned packages
alias cleanup='sudo pacman -Rns $(pacman -Qtdq)'

# Get the error messages from journalctl
alias jctl="journalctl -p 3 -xb"

# Recent installed packages
alias rip="expac --timefmt='%Y-%m-%d %T' '%l\t%n %v' | sort | tail -200 | nl"
alias big="expac -H M '%m\t%n' | sort -h | nl"     # Sort installed packages according to size in MB
alias gitpkg='pakcman -Q | grep -i "\-git" | wc -l' # List amount of -git packages
alias grep='grep --color=auto'
alias pacgrep='pacman -Q | grep'
alias pacser='pacman -Ss'

alias gsd='git config --global --add safe.directory $(pwd)'

alias fzf='fzf --preview="bat --style header --style snip --style changes --style header {}"'
alias speedtest='curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python -'
weather() {
  place=${1:-ranchi}
  curl "https://wttr.in/$place"
}

# Replace some more things with better alternatives
alias cat='bat --style header --style snip --style changes --style header'

alias sdf='sesh connect "$(sesh list -i | gum filter --limit 1 --placeholder "pick a sesh" --prompt='âš¡' )" '

alias ls='exa -a --color=always --group-directories-first --icons' # preferred listing
alias la='exa -a --color=always --group-directories-first --icons'  # all files and dirs
alias ll='exa -l --color=always --group-directories-first --icons'  # long format
alias lt='exa -aT --color=always --group-directories-first --icons' # tree listing
alias l.='exa -ald --color=always --group-directories-first --icons .*' # show only dotfiles
alias ip='ip -color'


export EDITOR=nvim

export ANDROID_EMULATOR_HOME='/home/Abhishek/D_drive/0LINUX_D-N-O/app-data/android-sdk/'
export GRADLE_USER_HOME='/home/Abhishek/D_drive/0LINUX_D-N-O/app-data/.gradle'
export ANDROID_HOME='/home/Abhishek/D_drive/0LINUX_D-N-O/apps/android_studio/sdk_folder/'
export ANDROID_USER_HOME='/home/Abhishek/D_drive/0LINUX_D-N-O/app-data/android-sdk/'
export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/platform-tools

# Go env variables

export GOPATH='/home/Abhishek/D_drive/0LINUX_D-N-O/app-data/golang/files'
export GO111MODULE='on'
export GOCACHE='/home/Abhishek/D_drive/0LINUX_D-N-O/app-data/golang/cache'
export GOBIN='/home/Abhishek/D_drive/0LINUX_D-N-O/app-data/golang/bin'


export PATH=$PATH:'/home/Abhishek/.local/share/gem/ruby/3.3.0/bin'
export PATH="$PATH:/home/Abhishek/.local/bin"
export ZDOTDIR='/home/Abhishek/.config/zsh'

export NVM_DIR="$HOME/.nvm"
export NVM_COMPLETION=true


# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
# [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

alias svenv='source /home/Abhishek/D_drive/0LINUX_D-N-O/app-data/python-venvs/.venvs/MyEnv/bin/activate'

source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh


# The following lines were added by compinstall

# End of lines added by compinstall

# ## start tmux on startup
# #
# if [ -x "$(command -v tmux)" ] && [ -n "${DISPLAY}" ] && [ -z "${TMUX}" ]; then
#     exec tmux
# fi

eval "$(zoxide init --cmd cd zsh)"
eval "$(starship init zsh)"
eval "$(atuin init zsh)"
eval "$(fzf --zsh)"


# export FZF_DEFAULT_COMMAND="fd --hidden --strip-cwd-prefix --exclue .git"
# export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
# export FZF_ALT_C_COMMAND="fd --type=d --hidden --strip-cwd-prefix --exclue .git"


# _fzf_compgen_path(){
#   fd --hidden --exclude .git . "$1"
# }

# _fzf_compgen_dir() {
#   fd --type=d --hidden --exclude .git . "$1"
# }


export PATH=$PATH:/home/Abhishek/.spicetify
export PATH=$PATH:/home/Abhishek/.cargo/bin
export VCPKG_ROOT="$HOME/.local/share/vcpkg"

# export ADS_LICENSE_FILE="C:\Program Files\Keysight\license.lic"
# export ADS_LICENSE_FILE="/home/Abhishek/.wine/drive_c/Program Files/Keysight/license.lic"

## Enconre backend server 
export ENCORE_INSTALL="/home/Abhishek/.encore"
export PATH="$ENCORE_INSTALL/bin:$PATH"
export TAVILY_API_KEY="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"


## PYENV
export PYENV_ROOT="$HOME/D_drive/0LINUX_D-N-O/app-data/pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init - zsh)"
# export PYENV_VIRTUALENVWRAPPER_PREFER_PYVENV="true"
